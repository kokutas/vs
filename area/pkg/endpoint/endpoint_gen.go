// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "github.com/kokutas/vs/area/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	SaveEndpoint            endpoint.Endpoint
	GetEndpoint             endpoint.Endpoint
	GetByIdEndpoint         endpoint.Endpoint
	GetByCodeEndpoint       endpoint.Endpoint
	GetByNameEndpoint       endpoint.Endpoint
	GetByTimeZoneEndpoint   endpoint.Endpoint
	GetByLanguageEndpoint   endpoint.Endpoint
	GetByStateEndpoint      endpoint.Endpoint
	GetByCreateTimeEndpoint endpoint.Endpoint
	GetByUpdateTimeEndpoint endpoint.Endpoint
	GetByDeleteTimeEndpoint endpoint.Endpoint
	UpdateCodeEndpoint      endpoint.Endpoint
	UpdateNameEndpoint      endpoint.Endpoint
	UpdateTimeZoneEndpoint  endpoint.Endpoint
	UpdateLanguageEndpoint  endpoint.Endpoint
	UpdateStateEndpoint     endpoint.Endpoint
	DeleteByIdEndpoint      endpoint.Endpoint
	DeleteByCodeEndpoint    endpoint.Endpoint
	DeleteByNameEndpoint    endpoint.Endpoint
	DeleteByStateEndpoint   endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.AreaService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		DeleteByCodeEndpoint:    MakeDeleteByCodeEndpoint(s),
		DeleteByIdEndpoint:      MakeDeleteByIdEndpoint(s),
		DeleteByNameEndpoint:    MakeDeleteByNameEndpoint(s),
		DeleteByStateEndpoint:   MakeDeleteByStateEndpoint(s),
		GetByCodeEndpoint:       MakeGetByCodeEndpoint(s),
		GetByCreateTimeEndpoint: MakeGetByCreateTimeEndpoint(s),
		GetByDeleteTimeEndpoint: MakeGetByDeleteTimeEndpoint(s),
		GetByIdEndpoint:         MakeGetByIdEndpoint(s),
		GetByLanguageEndpoint:   MakeGetByLanguageEndpoint(s),
		GetByNameEndpoint:       MakeGetByNameEndpoint(s),
		GetByStateEndpoint:      MakeGetByStateEndpoint(s),
		GetByTimeZoneEndpoint:   MakeGetByTimeZoneEndpoint(s),
		GetByUpdateTimeEndpoint: MakeGetByUpdateTimeEndpoint(s),
		GetEndpoint:             MakeGetEndpoint(s),
		SaveEndpoint:            MakeSaveEndpoint(s),
		UpdateCodeEndpoint:      MakeUpdateCodeEndpoint(s),
		UpdateLanguageEndpoint:  MakeUpdateLanguageEndpoint(s),
		UpdateNameEndpoint:      MakeUpdateNameEndpoint(s),
		UpdateStateEndpoint:     MakeUpdateStateEndpoint(s),
		UpdateTimeZoneEndpoint:  MakeUpdateTimeZoneEndpoint(s),
	}
	for _, m := range mdw["Save"] {
		eps.SaveEndpoint = m(eps.SaveEndpoint)
	}
	for _, m := range mdw["Get"] {
		eps.GetEndpoint = m(eps.GetEndpoint)
	}
	for _, m := range mdw["GetById"] {
		eps.GetByIdEndpoint = m(eps.GetByIdEndpoint)
	}
	for _, m := range mdw["GetByCode"] {
		eps.GetByCodeEndpoint = m(eps.GetByCodeEndpoint)
	}
	for _, m := range mdw["GetByName"] {
		eps.GetByNameEndpoint = m(eps.GetByNameEndpoint)
	}
	for _, m := range mdw["GetByTimeZone"] {
		eps.GetByTimeZoneEndpoint = m(eps.GetByTimeZoneEndpoint)
	}
	for _, m := range mdw["GetByLanguage"] {
		eps.GetByLanguageEndpoint = m(eps.GetByLanguageEndpoint)
	}
	for _, m := range mdw["GetByState"] {
		eps.GetByStateEndpoint = m(eps.GetByStateEndpoint)
	}
	for _, m := range mdw["GetByCreateTime"] {
		eps.GetByCreateTimeEndpoint = m(eps.GetByCreateTimeEndpoint)
	}
	for _, m := range mdw["GetByUpdateTime"] {
		eps.GetByUpdateTimeEndpoint = m(eps.GetByUpdateTimeEndpoint)
	}
	for _, m := range mdw["GetByDeleteTime"] {
		eps.GetByDeleteTimeEndpoint = m(eps.GetByDeleteTimeEndpoint)
	}
	for _, m := range mdw["UpdateCode"] {
		eps.UpdateCodeEndpoint = m(eps.UpdateCodeEndpoint)
	}
	for _, m := range mdw["UpdateName"] {
		eps.UpdateNameEndpoint = m(eps.UpdateNameEndpoint)
	}
	for _, m := range mdw["UpdateTimeZone"] {
		eps.UpdateTimeZoneEndpoint = m(eps.UpdateTimeZoneEndpoint)
	}
	for _, m := range mdw["UpdateLanguage"] {
		eps.UpdateLanguageEndpoint = m(eps.UpdateLanguageEndpoint)
	}
	for _, m := range mdw["UpdateState"] {
		eps.UpdateStateEndpoint = m(eps.UpdateStateEndpoint)
	}
	for _, m := range mdw["DeleteById"] {
		eps.DeleteByIdEndpoint = m(eps.DeleteByIdEndpoint)
	}
	for _, m := range mdw["DeleteByCode"] {
		eps.DeleteByCodeEndpoint = m(eps.DeleteByCodeEndpoint)
	}
	for _, m := range mdw["DeleteByName"] {
		eps.DeleteByNameEndpoint = m(eps.DeleteByNameEndpoint)
	}
	for _, m := range mdw["DeleteByState"] {
		eps.DeleteByStateEndpoint = m(eps.DeleteByStateEndpoint)
	}
	return eps
}
